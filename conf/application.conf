# This is the main configuration file for the application.
# ~~~~~
# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="asdjflaasdfasdfasjetr90j"
# The application languages
# ~~~~~
#application.langs="en"
# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global
# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes
# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled
# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.
# Root logger:
logger.root=ERROR
# Logger used by the framework:
logger.play=INFO
# Logger provided to your application:
logger.application=DEBUG

play.http.parser.maxMemoryBuffer=51480K
play.modules.enabled += "play.modules.swagger.SwaggerModule"
#Assets configuration
"assets.cache./public/"="max-age=3600"

remoteActor="akka.tcp://room@127.0.0.1:2552/user/room"
remoteActor=${?REMOTE}

systemUid=["e8bb21fbe30a4020a1d6cfb659fa3f66","0ed4a7450bbc4892adbc09af65ddcc19","c9dee47292a141909033ace599ad60c0"]
systemUid=${?SYS_UID}

akka {
  fork-join-executor {

    parallelism-factor = 1.0

    parallelism-max = 300

    task-peeking-mode = LIFO
  }
  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }
    serialization-bindings {
      "scala.Product" = kryo
    }
  }
  //远程协议-监听端口号
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "0.0.0.0"
      hostname=${?ROOMHOST}
    }
  }
}

mysql{
  driver="com.mysql.jdbc.Driver"
  username="root"
  password="123456"
  url="jdbc:mysql://localhost:3306/zb"
  url=${?DB_URl}
  username=${?DB_USER}
  password=${?DB_PWD}
}
ali{
  accessId="adfasdf"
  accessKey="adsfasdfsdaf"
  accessId=${?ALI_ID}
  accessKey=${?ALI_KEY}
}
ots{
  table = "ZBCache"
  z4z=true
  url="http://zbapi.cn-hangzhou.ots-internal.aliyuncs.com"
  instanceName="zbapi"
  instanceName=${?OTS_NAME}
  url=${?OTS_URL}
  z4z=${?OTS_Z4Z}
}
app.name= chatroom
app.debug=true
//以下为缓存区域
cache {
  oneSize=10000000
  #使用z4z压缩,减少流量和内存消耗
  z4z=true
}

//以下为文档区域
api.version="beta"
swagger.api.basepath="/"
swagger.api.info = {
  contact:"livehl@126.com",
  description : "就不说是啥项目。分页参数pageNum默认为1,pageSize默认为10",
  title : "接口文档",
  termsOfService :"",
  license : "tower",
  licenseUrl : "https://github.com"
}